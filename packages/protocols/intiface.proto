syntax = "proto3";
package IntifaceProtocols;

// This needs to stay in sync with the Buttplug Server CLI protocols.
message ServerControlMessage {
  message Stop {
  };

  oneof msg {
    Stop stop = 1;
  }
}

// This needs to stay in sync with the Buttplug Server CLI protocols.
message ServerProcessMessage {
  // Status messages from the server process
  message ProcessLog {
    string message = 1;
  };

  // Notifies frontend that server process is up and running
  message ProcessStarted {
  };

  // Notifies frontend that the server process errored out
  message ProcessError {
    string message = 1;
  };
  
  // Notifies frontend that server process has ended
  message ProcessEnded {
  };

  // Buttplug protocol log message from server process
  message ButtplugLog {
    string message = 1;
  };

  // Notification that a client has connected to the server process
  message ClientConnected {
    string client_name = 1;
  };

  // Notification that a client has disconnected from the server
  // process.
  message ClientDisconnected {
  };

  // Notification that the server has connected to a device.
  message DeviceConnected {
    string device_name = 1;
    uint32 device_id = 2;
  };

  // Notification that the server has disconnected from a device.
  message DeviceDisconnected {
    uint32 device_id = 1;
  };
  
  oneof msg {
    ProcessStarted process_started = 1;
    ProcessError process_error = 2;
    ProcessEnded process_ended = 3;
    ProcessLog process_log = 4;
    ButtplugLog buttplug_log = 5;
    ClientConnected client_connected = 6;
    ClientDisconnected client_disconnected = 7;
    DeviceConnected device_connected = 8;
    DeviceDisconnected device_disconnected = 9;
  };
}

// Messages that go from parent process to child interface/gui.
message IntifaceBackendMessage {

  // Sends full configuration file to the child process, usually on
  // startup to seed initial config information.
  message Configuration {
    string configuration = 1;
  };

  message UpdatesAvailable {
    bool application = 1;
    bool device_file = 2;
    bool engine = 3;
  };

  message DownloadProgress {
    uint32 bytes_received = 1;
    uint32 bytes_total = 2;
    string error = 3;
  };

  message CertificateGenerated {
  }
  
  message CertificateAcceptanceServerRunning {
    uint32 insecure_port = 1;
  };

  oneof msg {
    Configuration configuration = 1;
    UpdatesAvailable updates_available = 2;
    DownloadProgress download_progress = 3;
    CertificateAcceptanceServerRunning certificate_acceptance_server_running = 4;
    CertificateGenerated certificate_generated = 5;
    ServerProcessMessage server_process_message = 6;
  };
};

// Messages that go from child interface/gui to parent process.
message IntifaceFrontendMessage {
  // Sent from frontend to backend when frontend is considered to be
  // up and running. Will cause backend to respond by sending
  // configuration.
  message Ready {
  };
  
  // Requests server start a new process.
  message StartProcess {
  };

  // Requests server stop current process.
  message StopProcess {
  };
  
  // Requests server starts listening on Buttplug proxy ports.
  message StartProxy {
  };

  // Requests server stops listening on Buttplug proxy ports.
  message StopProxy {
  };

  // Sends full configuration file to parent process, on each change,
  // in order for it to be saved to disk.
  message UpdateConfig {
    string configuration = 1;
  };

  message CheckForUpdates {
  };

  message UpdateEngine {
  };

  message UpdateDeviceFile {
  };

  message GenerateCertificate {
  };

  message RunCertificateAcceptanceServer {
  };

  message StopCertificateAcceptanceServer {
  };

  oneof msg {
    Ready ready = 1;
    StartProcess start_process = 2;
    StopProcess stop_process = 3;
    StartProxy start_proxy = 4;
    StopProxy stop_proxy = 5;
    UpdateConfig update_config = 6;
    CheckForUpdates check_for_updates = 7;
    UpdateEngine update_engine = 8;
    UpdateDeviceFile update_device_file = 9;
    GenerateCertificate generate_certificate = 10;
    RunCertificateAcceptanceServer run_certificate_acceptance_server = 11;
    StopCertificateAcceptanceServer stop_certificate_acceptance_server = 12;
  };
};
