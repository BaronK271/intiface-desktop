/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.intiface_protocol.ServerFrontendMessage', null, global);
goog.exportSymbol('proto.intiface_protocol.ServerFrontendMessage.StartProcess', null, global);
goog.exportSymbol('proto.intiface_protocol.ServerFrontendMessage.StartProxy', null, global);
goog.exportSymbol('proto.intiface_protocol.ServerFrontendMessage.StopProcess', null, global);
goog.exportSymbol('proto.intiface_protocol.ServerFrontendMessage.StopProxy', null, global);
goog.exportSymbol('proto.intiface_protocol.ServerFrontendMessage.UpdateConfig', null, global);
goog.exportSymbol('proto.intiface_protocol.ServerProcessMessage', null, global);
goog.exportSymbol('proto.intiface_protocol.ServerProcessMessage.ButtplugLog', null, global);
goog.exportSymbol('proto.intiface_protocol.ServerProcessMessage.ClientConnected', null, global);
goog.exportSymbol('proto.intiface_protocol.ServerProcessMessage.ClientDisconnected', null, global);
goog.exportSymbol('proto.intiface_protocol.ServerProcessMessage.DeviceConnected', null, global);
goog.exportSymbol('proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected', null, global);
goog.exportSymbol('proto.intiface_protocol.ServerProcessMessage.ProcessEnded', null, global);
goog.exportSymbol('proto.intiface_protocol.ServerProcessMessage.ProcessLog', null, global);
goog.exportSymbol('proto.intiface_protocol.ServerProcessMessage.ProcessStarted', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intiface_protocol.ServerProcessMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.intiface_protocol.ServerProcessMessage.oneofGroups_);
};
goog.inherits(proto.intiface_protocol.ServerProcessMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intiface_protocol.ServerProcessMessage.displayName = 'proto.intiface_protocol.ServerProcessMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.intiface_protocol.ServerProcessMessage.oneofGroups_ = [[1,2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.intiface_protocol.ServerProcessMessage.MsgCase = {
  MSG_NOT_SET: 0,
  PROCESSSTARTED: 1,
  PROCESSENDED: 2,
  PROCESSLOG: 3,
  BPLOG: 4,
  CLIENTCONNECTED: 5,
  CLIENTDISCONNECTED: 6,
  DEVICECONNECTED: 7,
  DEVICEDISCONNECTED: 8
};

/**
 * @return {proto.intiface_protocol.ServerProcessMessage.MsgCase}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.getMsgCase = function() {
  return /** @type {proto.intiface_protocol.ServerProcessMessage.MsgCase} */(jspb.Message.computeOneofCase(this, proto.intiface_protocol.ServerProcessMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.intiface_protocol.ServerProcessMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intiface_protocol.ServerProcessMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    processstarted: (f = msg.getProcessstarted()) && proto.intiface_protocol.ServerProcessMessage.ProcessStarted.toObject(includeInstance, f),
    processended: (f = msg.getProcessended()) && proto.intiface_protocol.ServerProcessMessage.ProcessEnded.toObject(includeInstance, f),
    processlog: (f = msg.getProcesslog()) && proto.intiface_protocol.ServerProcessMessage.ProcessLog.toObject(includeInstance, f),
    bplog: (f = msg.getBplog()) && proto.intiface_protocol.ServerProcessMessage.ButtplugLog.toObject(includeInstance, f),
    clientconnected: (f = msg.getClientconnected()) && proto.intiface_protocol.ServerProcessMessage.ClientConnected.toObject(includeInstance, f),
    clientdisconnected: (f = msg.getClientdisconnected()) && proto.intiface_protocol.ServerProcessMessage.ClientDisconnected.toObject(includeInstance, f),
    deviceconnected: (f = msg.getDeviceconnected()) && proto.intiface_protocol.ServerProcessMessage.DeviceConnected.toObject(includeInstance, f),
    devicedisconnected: (f = msg.getDevicedisconnected()) && proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intiface_protocol.ServerProcessMessage}
 */
proto.intiface_protocol.ServerProcessMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intiface_protocol.ServerProcessMessage;
  return proto.intiface_protocol.ServerProcessMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intiface_protocol.ServerProcessMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intiface_protocol.ServerProcessMessage}
 */
proto.intiface_protocol.ServerProcessMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.intiface_protocol.ServerProcessMessage.ProcessStarted;
      reader.readMessage(value,proto.intiface_protocol.ServerProcessMessage.ProcessStarted.deserializeBinaryFromReader);
      msg.setProcessstarted(value);
      break;
    case 2:
      var value = new proto.intiface_protocol.ServerProcessMessage.ProcessEnded;
      reader.readMessage(value,proto.intiface_protocol.ServerProcessMessage.ProcessEnded.deserializeBinaryFromReader);
      msg.setProcessended(value);
      break;
    case 3:
      var value = new proto.intiface_protocol.ServerProcessMessage.ProcessLog;
      reader.readMessage(value,proto.intiface_protocol.ServerProcessMessage.ProcessLog.deserializeBinaryFromReader);
      msg.setProcesslog(value);
      break;
    case 4:
      var value = new proto.intiface_protocol.ServerProcessMessage.ButtplugLog;
      reader.readMessage(value,proto.intiface_protocol.ServerProcessMessage.ButtplugLog.deserializeBinaryFromReader);
      msg.setBplog(value);
      break;
    case 5:
      var value = new proto.intiface_protocol.ServerProcessMessage.ClientConnected;
      reader.readMessage(value,proto.intiface_protocol.ServerProcessMessage.ClientConnected.deserializeBinaryFromReader);
      msg.setClientconnected(value);
      break;
    case 6:
      var value = new proto.intiface_protocol.ServerProcessMessage.ClientDisconnected;
      reader.readMessage(value,proto.intiface_protocol.ServerProcessMessage.ClientDisconnected.deserializeBinaryFromReader);
      msg.setClientdisconnected(value);
      break;
    case 7:
      var value = new proto.intiface_protocol.ServerProcessMessage.DeviceConnected;
      reader.readMessage(value,proto.intiface_protocol.ServerProcessMessage.DeviceConnected.deserializeBinaryFromReader);
      msg.setDeviceconnected(value);
      break;
    case 8:
      var value = new proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected;
      reader.readMessage(value,proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected.deserializeBinaryFromReader);
      msg.setDevicedisconnected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intiface_protocol.ServerProcessMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intiface_protocol.ServerProcessMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessstarted();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.intiface_protocol.ServerProcessMessage.ProcessStarted.serializeBinaryToWriter
    );
  }
  f = message.getProcessended();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.intiface_protocol.ServerProcessMessage.ProcessEnded.serializeBinaryToWriter
    );
  }
  f = message.getProcesslog();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.intiface_protocol.ServerProcessMessage.ProcessLog.serializeBinaryToWriter
    );
  }
  f = message.getBplog();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.intiface_protocol.ServerProcessMessage.ButtplugLog.serializeBinaryToWriter
    );
  }
  f = message.getClientconnected();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.intiface_protocol.ServerProcessMessage.ClientConnected.serializeBinaryToWriter
    );
  }
  f = message.getClientdisconnected();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.intiface_protocol.ServerProcessMessage.ClientDisconnected.serializeBinaryToWriter
    );
  }
  f = message.getDeviceconnected();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.intiface_protocol.ServerProcessMessage.DeviceConnected.serializeBinaryToWriter
    );
  }
  f = message.getDevicedisconnected();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intiface_protocol.ServerProcessMessage.ProcessLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intiface_protocol.ServerProcessMessage.ProcessLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intiface_protocol.ServerProcessMessage.ProcessLog.displayName = 'proto.intiface_protocol.ServerProcessMessage.ProcessLog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intiface_protocol.ServerProcessMessage.ProcessLog.prototype.toObject = function(opt_includeInstance) {
  return proto.intiface_protocol.ServerProcessMessage.ProcessLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intiface_protocol.ServerProcessMessage.ProcessLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.ProcessLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intiface_protocol.ServerProcessMessage.ProcessLog}
 */
proto.intiface_protocol.ServerProcessMessage.ProcessLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intiface_protocol.ServerProcessMessage.ProcessLog;
  return proto.intiface_protocol.ServerProcessMessage.ProcessLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intiface_protocol.ServerProcessMessage.ProcessLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intiface_protocol.ServerProcessMessage.ProcessLog}
 */
proto.intiface_protocol.ServerProcessMessage.ProcessLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intiface_protocol.ServerProcessMessage.ProcessLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intiface_protocol.ServerProcessMessage.ProcessLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intiface_protocol.ServerProcessMessage.ProcessLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.ProcessLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.intiface_protocol.ServerProcessMessage.ProcessLog.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intiface_protocol.ServerProcessMessage.ProcessLog.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intiface_protocol.ServerProcessMessage.ProcessStarted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intiface_protocol.ServerProcessMessage.ProcessStarted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intiface_protocol.ServerProcessMessage.ProcessStarted.displayName = 'proto.intiface_protocol.ServerProcessMessage.ProcessStarted';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intiface_protocol.ServerProcessMessage.ProcessStarted.prototype.toObject = function(opt_includeInstance) {
  return proto.intiface_protocol.ServerProcessMessage.ProcessStarted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intiface_protocol.ServerProcessMessage.ProcessStarted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.ProcessStarted.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intiface_protocol.ServerProcessMessage.ProcessStarted}
 */
proto.intiface_protocol.ServerProcessMessage.ProcessStarted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intiface_protocol.ServerProcessMessage.ProcessStarted;
  return proto.intiface_protocol.ServerProcessMessage.ProcessStarted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intiface_protocol.ServerProcessMessage.ProcessStarted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intiface_protocol.ServerProcessMessage.ProcessStarted}
 */
proto.intiface_protocol.ServerProcessMessage.ProcessStarted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intiface_protocol.ServerProcessMessage.ProcessStarted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intiface_protocol.ServerProcessMessage.ProcessStarted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intiface_protocol.ServerProcessMessage.ProcessStarted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.ProcessStarted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intiface_protocol.ServerProcessMessage.ProcessEnded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intiface_protocol.ServerProcessMessage.ProcessEnded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intiface_protocol.ServerProcessMessage.ProcessEnded.displayName = 'proto.intiface_protocol.ServerProcessMessage.ProcessEnded';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intiface_protocol.ServerProcessMessage.ProcessEnded.prototype.toObject = function(opt_includeInstance) {
  return proto.intiface_protocol.ServerProcessMessage.ProcessEnded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intiface_protocol.ServerProcessMessage.ProcessEnded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.ProcessEnded.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intiface_protocol.ServerProcessMessage.ProcessEnded}
 */
proto.intiface_protocol.ServerProcessMessage.ProcessEnded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intiface_protocol.ServerProcessMessage.ProcessEnded;
  return proto.intiface_protocol.ServerProcessMessage.ProcessEnded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intiface_protocol.ServerProcessMessage.ProcessEnded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intiface_protocol.ServerProcessMessage.ProcessEnded}
 */
proto.intiface_protocol.ServerProcessMessage.ProcessEnded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intiface_protocol.ServerProcessMessage.ProcessEnded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intiface_protocol.ServerProcessMessage.ProcessEnded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intiface_protocol.ServerProcessMessage.ProcessEnded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.ProcessEnded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intiface_protocol.ServerProcessMessage.ButtplugLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intiface_protocol.ServerProcessMessage.ButtplugLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intiface_protocol.ServerProcessMessage.ButtplugLog.displayName = 'proto.intiface_protocol.ServerProcessMessage.ButtplugLog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intiface_protocol.ServerProcessMessage.ButtplugLog.prototype.toObject = function(opt_includeInstance) {
  return proto.intiface_protocol.ServerProcessMessage.ButtplugLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intiface_protocol.ServerProcessMessage.ButtplugLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.ButtplugLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intiface_protocol.ServerProcessMessage.ButtplugLog}
 */
proto.intiface_protocol.ServerProcessMessage.ButtplugLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intiface_protocol.ServerProcessMessage.ButtplugLog;
  return proto.intiface_protocol.ServerProcessMessage.ButtplugLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intiface_protocol.ServerProcessMessage.ButtplugLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intiface_protocol.ServerProcessMessage.ButtplugLog}
 */
proto.intiface_protocol.ServerProcessMessage.ButtplugLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intiface_protocol.ServerProcessMessage.ButtplugLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intiface_protocol.ServerProcessMessage.ButtplugLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intiface_protocol.ServerProcessMessage.ButtplugLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.ButtplugLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.intiface_protocol.ServerProcessMessage.ButtplugLog.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intiface_protocol.ServerProcessMessage.ButtplugLog.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intiface_protocol.ServerProcessMessage.ClientConnected = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intiface_protocol.ServerProcessMessage.ClientConnected, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intiface_protocol.ServerProcessMessage.ClientConnected.displayName = 'proto.intiface_protocol.ServerProcessMessage.ClientConnected';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intiface_protocol.ServerProcessMessage.ClientConnected.prototype.toObject = function(opt_includeInstance) {
  return proto.intiface_protocol.ServerProcessMessage.ClientConnected.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intiface_protocol.ServerProcessMessage.ClientConnected} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.ClientConnected.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intiface_protocol.ServerProcessMessage.ClientConnected}
 */
proto.intiface_protocol.ServerProcessMessage.ClientConnected.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intiface_protocol.ServerProcessMessage.ClientConnected;
  return proto.intiface_protocol.ServerProcessMessage.ClientConnected.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intiface_protocol.ServerProcessMessage.ClientConnected} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intiface_protocol.ServerProcessMessage.ClientConnected}
 */
proto.intiface_protocol.ServerProcessMessage.ClientConnected.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intiface_protocol.ServerProcessMessage.ClientConnected.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intiface_protocol.ServerProcessMessage.ClientConnected.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intiface_protocol.ServerProcessMessage.ClientConnected} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.ClientConnected.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string client_name = 1;
 * @return {string}
 */
proto.intiface_protocol.ServerProcessMessage.ClientConnected.prototype.getClientName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intiface_protocol.ServerProcessMessage.ClientConnected.prototype.setClientName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intiface_protocol.ServerProcessMessage.ClientDisconnected = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intiface_protocol.ServerProcessMessage.ClientDisconnected, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intiface_protocol.ServerProcessMessage.ClientDisconnected.displayName = 'proto.intiface_protocol.ServerProcessMessage.ClientDisconnected';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intiface_protocol.ServerProcessMessage.ClientDisconnected.prototype.toObject = function(opt_includeInstance) {
  return proto.intiface_protocol.ServerProcessMessage.ClientDisconnected.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intiface_protocol.ServerProcessMessage.ClientDisconnected} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.ClientDisconnected.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intiface_protocol.ServerProcessMessage.ClientDisconnected}
 */
proto.intiface_protocol.ServerProcessMessage.ClientDisconnected.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intiface_protocol.ServerProcessMessage.ClientDisconnected;
  return proto.intiface_protocol.ServerProcessMessage.ClientDisconnected.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intiface_protocol.ServerProcessMessage.ClientDisconnected} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intiface_protocol.ServerProcessMessage.ClientDisconnected}
 */
proto.intiface_protocol.ServerProcessMessage.ClientDisconnected.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intiface_protocol.ServerProcessMessage.ClientDisconnected.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intiface_protocol.ServerProcessMessage.ClientDisconnected.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intiface_protocol.ServerProcessMessage.ClientDisconnected} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.ClientDisconnected.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intiface_protocol.ServerProcessMessage.DeviceConnected = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intiface_protocol.ServerProcessMessage.DeviceConnected, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intiface_protocol.ServerProcessMessage.DeviceConnected.displayName = 'proto.intiface_protocol.ServerProcessMessage.DeviceConnected';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intiface_protocol.ServerProcessMessage.DeviceConnected.prototype.toObject = function(opt_includeInstance) {
  return proto.intiface_protocol.ServerProcessMessage.DeviceConnected.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intiface_protocol.ServerProcessMessage.DeviceConnected} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.DeviceConnected.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intiface_protocol.ServerProcessMessage.DeviceConnected}
 */
proto.intiface_protocol.ServerProcessMessage.DeviceConnected.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intiface_protocol.ServerProcessMessage.DeviceConnected;
  return proto.intiface_protocol.ServerProcessMessage.DeviceConnected.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intiface_protocol.ServerProcessMessage.DeviceConnected} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intiface_protocol.ServerProcessMessage.DeviceConnected}
 */
proto.intiface_protocol.ServerProcessMessage.DeviceConnected.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intiface_protocol.ServerProcessMessage.DeviceConnected.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intiface_protocol.ServerProcessMessage.DeviceConnected.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intiface_protocol.ServerProcessMessage.DeviceConnected} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.DeviceConnected.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string device_name = 1;
 * @return {string}
 */
proto.intiface_protocol.ServerProcessMessage.DeviceConnected.prototype.getDeviceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.intiface_protocol.ServerProcessMessage.DeviceConnected.prototype.setDeviceName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 device_id = 2;
 * @return {number}
 */
proto.intiface_protocol.ServerProcessMessage.DeviceConnected.prototype.getDeviceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.intiface_protocol.ServerProcessMessage.DeviceConnected.prototype.setDeviceId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected.displayName = 'proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected.prototype.toObject = function(opt_includeInstance) {
  return proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected}
 */
proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected;
  return proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected}
 */
proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 device_id = 1;
 * @return {number}
 */
proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected.prototype.getDeviceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected.prototype.setDeviceId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ProcessStarted processstarted = 1;
 * @return {?proto.intiface_protocol.ServerProcessMessage.ProcessStarted}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.getProcessstarted = function() {
  return /** @type{?proto.intiface_protocol.ServerProcessMessage.ProcessStarted} */ (
    jspb.Message.getWrapperField(this, proto.intiface_protocol.ServerProcessMessage.ProcessStarted, 1));
};


/** @param {?proto.intiface_protocol.ServerProcessMessage.ProcessStarted|undefined} value */
proto.intiface_protocol.ServerProcessMessage.prototype.setProcessstarted = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.intiface_protocol.ServerProcessMessage.oneofGroups_[0], value);
};


proto.intiface_protocol.ServerProcessMessage.prototype.clearProcessstarted = function() {
  this.setProcessstarted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.hasProcessstarted = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ProcessEnded processended = 2;
 * @return {?proto.intiface_protocol.ServerProcessMessage.ProcessEnded}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.getProcessended = function() {
  return /** @type{?proto.intiface_protocol.ServerProcessMessage.ProcessEnded} */ (
    jspb.Message.getWrapperField(this, proto.intiface_protocol.ServerProcessMessage.ProcessEnded, 2));
};


/** @param {?proto.intiface_protocol.ServerProcessMessage.ProcessEnded|undefined} value */
proto.intiface_protocol.ServerProcessMessage.prototype.setProcessended = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.intiface_protocol.ServerProcessMessage.oneofGroups_[0], value);
};


proto.intiface_protocol.ServerProcessMessage.prototype.clearProcessended = function() {
  this.setProcessended(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.hasProcessended = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProcessLog processlog = 3;
 * @return {?proto.intiface_protocol.ServerProcessMessage.ProcessLog}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.getProcesslog = function() {
  return /** @type{?proto.intiface_protocol.ServerProcessMessage.ProcessLog} */ (
    jspb.Message.getWrapperField(this, proto.intiface_protocol.ServerProcessMessage.ProcessLog, 3));
};


/** @param {?proto.intiface_protocol.ServerProcessMessage.ProcessLog|undefined} value */
proto.intiface_protocol.ServerProcessMessage.prototype.setProcesslog = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.intiface_protocol.ServerProcessMessage.oneofGroups_[0], value);
};


proto.intiface_protocol.ServerProcessMessage.prototype.clearProcesslog = function() {
  this.setProcesslog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.hasProcesslog = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ButtplugLog bplog = 4;
 * @return {?proto.intiface_protocol.ServerProcessMessage.ButtplugLog}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.getBplog = function() {
  return /** @type{?proto.intiface_protocol.ServerProcessMessage.ButtplugLog} */ (
    jspb.Message.getWrapperField(this, proto.intiface_protocol.ServerProcessMessage.ButtplugLog, 4));
};


/** @param {?proto.intiface_protocol.ServerProcessMessage.ButtplugLog|undefined} value */
proto.intiface_protocol.ServerProcessMessage.prototype.setBplog = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.intiface_protocol.ServerProcessMessage.oneofGroups_[0], value);
};


proto.intiface_protocol.ServerProcessMessage.prototype.clearBplog = function() {
  this.setBplog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.hasBplog = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ClientConnected clientconnected = 5;
 * @return {?proto.intiface_protocol.ServerProcessMessage.ClientConnected}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.getClientconnected = function() {
  return /** @type{?proto.intiface_protocol.ServerProcessMessage.ClientConnected} */ (
    jspb.Message.getWrapperField(this, proto.intiface_protocol.ServerProcessMessage.ClientConnected, 5));
};


/** @param {?proto.intiface_protocol.ServerProcessMessage.ClientConnected|undefined} value */
proto.intiface_protocol.ServerProcessMessage.prototype.setClientconnected = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.intiface_protocol.ServerProcessMessage.oneofGroups_[0], value);
};


proto.intiface_protocol.ServerProcessMessage.prototype.clearClientconnected = function() {
  this.setClientconnected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.hasClientconnected = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ClientDisconnected clientdisconnected = 6;
 * @return {?proto.intiface_protocol.ServerProcessMessage.ClientDisconnected}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.getClientdisconnected = function() {
  return /** @type{?proto.intiface_protocol.ServerProcessMessage.ClientDisconnected} */ (
    jspb.Message.getWrapperField(this, proto.intiface_protocol.ServerProcessMessage.ClientDisconnected, 6));
};


/** @param {?proto.intiface_protocol.ServerProcessMessage.ClientDisconnected|undefined} value */
proto.intiface_protocol.ServerProcessMessage.prototype.setClientdisconnected = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.intiface_protocol.ServerProcessMessage.oneofGroups_[0], value);
};


proto.intiface_protocol.ServerProcessMessage.prototype.clearClientdisconnected = function() {
  this.setClientdisconnected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.hasClientdisconnected = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional DeviceConnected deviceconnected = 7;
 * @return {?proto.intiface_protocol.ServerProcessMessage.DeviceConnected}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.getDeviceconnected = function() {
  return /** @type{?proto.intiface_protocol.ServerProcessMessage.DeviceConnected} */ (
    jspb.Message.getWrapperField(this, proto.intiface_protocol.ServerProcessMessage.DeviceConnected, 7));
};


/** @param {?proto.intiface_protocol.ServerProcessMessage.DeviceConnected|undefined} value */
proto.intiface_protocol.ServerProcessMessage.prototype.setDeviceconnected = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.intiface_protocol.ServerProcessMessage.oneofGroups_[0], value);
};


proto.intiface_protocol.ServerProcessMessage.prototype.clearDeviceconnected = function() {
  this.setDeviceconnected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.hasDeviceconnected = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DeviceDisconnected devicedisconnected = 8;
 * @return {?proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.getDevicedisconnected = function() {
  return /** @type{?proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected} */ (
    jspb.Message.getWrapperField(this, proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected, 8));
};


/** @param {?proto.intiface_protocol.ServerProcessMessage.DeviceDisconnected|undefined} value */
proto.intiface_protocol.ServerProcessMessage.prototype.setDevicedisconnected = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.intiface_protocol.ServerProcessMessage.oneofGroups_[0], value);
};


proto.intiface_protocol.ServerProcessMessage.prototype.clearDevicedisconnected = function() {
  this.setDevicedisconnected(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.intiface_protocol.ServerProcessMessage.prototype.hasDevicedisconnected = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intiface_protocol.ServerFrontendMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.intiface_protocol.ServerFrontendMessage.oneofGroups_);
};
goog.inherits(proto.intiface_protocol.ServerFrontendMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intiface_protocol.ServerFrontendMessage.displayName = 'proto.intiface_protocol.ServerFrontendMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.intiface_protocol.ServerFrontendMessage.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.intiface_protocol.ServerFrontendMessage.MsgCase = {
  MSG_NOT_SET: 0,
  STARTPROCESS: 1,
  STOPPROCESS: 2,
  STARTPROXY: 3,
  STOPPROXY: 4,
  UPDATECONFIG: 5
};

/**
 * @return {proto.intiface_protocol.ServerFrontendMessage.MsgCase}
 */
proto.intiface_protocol.ServerFrontendMessage.prototype.getMsgCase = function() {
  return /** @type {proto.intiface_protocol.ServerFrontendMessage.MsgCase} */(jspb.Message.computeOneofCase(this, proto.intiface_protocol.ServerFrontendMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intiface_protocol.ServerFrontendMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.intiface_protocol.ServerFrontendMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intiface_protocol.ServerFrontendMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerFrontendMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    startprocess: (f = msg.getStartprocess()) && proto.intiface_protocol.ServerFrontendMessage.StartProcess.toObject(includeInstance, f),
    stopprocess: (f = msg.getStopprocess()) && proto.intiface_protocol.ServerFrontendMessage.StopProcess.toObject(includeInstance, f),
    startproxy: (f = msg.getStartproxy()) && proto.intiface_protocol.ServerFrontendMessage.StartProxy.toObject(includeInstance, f),
    stopproxy: (f = msg.getStopproxy()) && proto.intiface_protocol.ServerFrontendMessage.StopProxy.toObject(includeInstance, f),
    updateconfig: (f = msg.getUpdateconfig()) && proto.intiface_protocol.ServerFrontendMessage.UpdateConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intiface_protocol.ServerFrontendMessage}
 */
proto.intiface_protocol.ServerFrontendMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intiface_protocol.ServerFrontendMessage;
  return proto.intiface_protocol.ServerFrontendMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intiface_protocol.ServerFrontendMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intiface_protocol.ServerFrontendMessage}
 */
proto.intiface_protocol.ServerFrontendMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.intiface_protocol.ServerFrontendMessage.StartProcess;
      reader.readMessage(value,proto.intiface_protocol.ServerFrontendMessage.StartProcess.deserializeBinaryFromReader);
      msg.setStartprocess(value);
      break;
    case 2:
      var value = new proto.intiface_protocol.ServerFrontendMessage.StopProcess;
      reader.readMessage(value,proto.intiface_protocol.ServerFrontendMessage.StopProcess.deserializeBinaryFromReader);
      msg.setStopprocess(value);
      break;
    case 3:
      var value = new proto.intiface_protocol.ServerFrontendMessage.StartProxy;
      reader.readMessage(value,proto.intiface_protocol.ServerFrontendMessage.StartProxy.deserializeBinaryFromReader);
      msg.setStartproxy(value);
      break;
    case 4:
      var value = new proto.intiface_protocol.ServerFrontendMessage.StopProxy;
      reader.readMessage(value,proto.intiface_protocol.ServerFrontendMessage.StopProxy.deserializeBinaryFromReader);
      msg.setStopproxy(value);
      break;
    case 5:
      var value = new proto.intiface_protocol.ServerFrontendMessage.UpdateConfig;
      reader.readMessage(value,proto.intiface_protocol.ServerFrontendMessage.UpdateConfig.deserializeBinaryFromReader);
      msg.setUpdateconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intiface_protocol.ServerFrontendMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intiface_protocol.ServerFrontendMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intiface_protocol.ServerFrontendMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerFrontendMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartprocess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.intiface_protocol.ServerFrontendMessage.StartProcess.serializeBinaryToWriter
    );
  }
  f = message.getStopprocess();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.intiface_protocol.ServerFrontendMessage.StopProcess.serializeBinaryToWriter
    );
  }
  f = message.getStartproxy();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.intiface_protocol.ServerFrontendMessage.StartProxy.serializeBinaryToWriter
    );
  }
  f = message.getStopproxy();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.intiface_protocol.ServerFrontendMessage.StopProxy.serializeBinaryToWriter
    );
  }
  f = message.getUpdateconfig();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.intiface_protocol.ServerFrontendMessage.UpdateConfig.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intiface_protocol.ServerFrontendMessage.StartProcess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intiface_protocol.ServerFrontendMessage.StartProcess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intiface_protocol.ServerFrontendMessage.StartProcess.displayName = 'proto.intiface_protocol.ServerFrontendMessage.StartProcess';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intiface_protocol.ServerFrontendMessage.StartProcess.prototype.toObject = function(opt_includeInstance) {
  return proto.intiface_protocol.ServerFrontendMessage.StartProcess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intiface_protocol.ServerFrontendMessage.StartProcess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerFrontendMessage.StartProcess.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intiface_protocol.ServerFrontendMessage.StartProcess}
 */
proto.intiface_protocol.ServerFrontendMessage.StartProcess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intiface_protocol.ServerFrontendMessage.StartProcess;
  return proto.intiface_protocol.ServerFrontendMessage.StartProcess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intiface_protocol.ServerFrontendMessage.StartProcess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intiface_protocol.ServerFrontendMessage.StartProcess}
 */
proto.intiface_protocol.ServerFrontendMessage.StartProcess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intiface_protocol.ServerFrontendMessage.StartProcess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intiface_protocol.ServerFrontendMessage.StartProcess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intiface_protocol.ServerFrontendMessage.StartProcess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerFrontendMessage.StartProcess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intiface_protocol.ServerFrontendMessage.StopProcess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intiface_protocol.ServerFrontendMessage.StopProcess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intiface_protocol.ServerFrontendMessage.StopProcess.displayName = 'proto.intiface_protocol.ServerFrontendMessage.StopProcess';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intiface_protocol.ServerFrontendMessage.StopProcess.prototype.toObject = function(opt_includeInstance) {
  return proto.intiface_protocol.ServerFrontendMessage.StopProcess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intiface_protocol.ServerFrontendMessage.StopProcess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerFrontendMessage.StopProcess.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intiface_protocol.ServerFrontendMessage.StopProcess}
 */
proto.intiface_protocol.ServerFrontendMessage.StopProcess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intiface_protocol.ServerFrontendMessage.StopProcess;
  return proto.intiface_protocol.ServerFrontendMessage.StopProcess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intiface_protocol.ServerFrontendMessage.StopProcess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intiface_protocol.ServerFrontendMessage.StopProcess}
 */
proto.intiface_protocol.ServerFrontendMessage.StopProcess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intiface_protocol.ServerFrontendMessage.StopProcess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intiface_protocol.ServerFrontendMessage.StopProcess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intiface_protocol.ServerFrontendMessage.StopProcess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerFrontendMessage.StopProcess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intiface_protocol.ServerFrontendMessage.StartProxy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intiface_protocol.ServerFrontendMessage.StartProxy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intiface_protocol.ServerFrontendMessage.StartProxy.displayName = 'proto.intiface_protocol.ServerFrontendMessage.StartProxy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intiface_protocol.ServerFrontendMessage.StartProxy.prototype.toObject = function(opt_includeInstance) {
  return proto.intiface_protocol.ServerFrontendMessage.StartProxy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intiface_protocol.ServerFrontendMessage.StartProxy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerFrontendMessage.StartProxy.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intiface_protocol.ServerFrontendMessage.StartProxy}
 */
proto.intiface_protocol.ServerFrontendMessage.StartProxy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intiface_protocol.ServerFrontendMessage.StartProxy;
  return proto.intiface_protocol.ServerFrontendMessage.StartProxy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intiface_protocol.ServerFrontendMessage.StartProxy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intiface_protocol.ServerFrontendMessage.StartProxy}
 */
proto.intiface_protocol.ServerFrontendMessage.StartProxy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intiface_protocol.ServerFrontendMessage.StartProxy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intiface_protocol.ServerFrontendMessage.StartProxy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intiface_protocol.ServerFrontendMessage.StartProxy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerFrontendMessage.StartProxy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intiface_protocol.ServerFrontendMessage.StopProxy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intiface_protocol.ServerFrontendMessage.StopProxy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intiface_protocol.ServerFrontendMessage.StopProxy.displayName = 'proto.intiface_protocol.ServerFrontendMessage.StopProxy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intiface_protocol.ServerFrontendMessage.StopProxy.prototype.toObject = function(opt_includeInstance) {
  return proto.intiface_protocol.ServerFrontendMessage.StopProxy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intiface_protocol.ServerFrontendMessage.StopProxy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerFrontendMessage.StopProxy.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intiface_protocol.ServerFrontendMessage.StopProxy}
 */
proto.intiface_protocol.ServerFrontendMessage.StopProxy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intiface_protocol.ServerFrontendMessage.StopProxy;
  return proto.intiface_protocol.ServerFrontendMessage.StopProxy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intiface_protocol.ServerFrontendMessage.StopProxy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intiface_protocol.ServerFrontendMessage.StopProxy}
 */
proto.intiface_protocol.ServerFrontendMessage.StopProxy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intiface_protocol.ServerFrontendMessage.StopProxy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intiface_protocol.ServerFrontendMessage.StopProxy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intiface_protocol.ServerFrontendMessage.StopProxy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerFrontendMessage.StopProxy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.intiface_protocol.ServerFrontendMessage.UpdateConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.intiface_protocol.ServerFrontendMessage.UpdateConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.intiface_protocol.ServerFrontendMessage.UpdateConfig.displayName = 'proto.intiface_protocol.ServerFrontendMessage.UpdateConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.intiface_protocol.ServerFrontendMessage.UpdateConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.intiface_protocol.ServerFrontendMessage.UpdateConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.intiface_protocol.ServerFrontendMessage.UpdateConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerFrontendMessage.UpdateConfig.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.intiface_protocol.ServerFrontendMessage.UpdateConfig}
 */
proto.intiface_protocol.ServerFrontendMessage.UpdateConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.intiface_protocol.ServerFrontendMessage.UpdateConfig;
  return proto.intiface_protocol.ServerFrontendMessage.UpdateConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.intiface_protocol.ServerFrontendMessage.UpdateConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.intiface_protocol.ServerFrontendMessage.UpdateConfig}
 */
proto.intiface_protocol.ServerFrontendMessage.UpdateConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.intiface_protocol.ServerFrontendMessage.UpdateConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.intiface_protocol.ServerFrontendMessage.UpdateConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.intiface_protocol.ServerFrontendMessage.UpdateConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.intiface_protocol.ServerFrontendMessage.UpdateConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional StartProcess startprocess = 1;
 * @return {?proto.intiface_protocol.ServerFrontendMessage.StartProcess}
 */
proto.intiface_protocol.ServerFrontendMessage.prototype.getStartprocess = function() {
  return /** @type{?proto.intiface_protocol.ServerFrontendMessage.StartProcess} */ (
    jspb.Message.getWrapperField(this, proto.intiface_protocol.ServerFrontendMessage.StartProcess, 1));
};


/** @param {?proto.intiface_protocol.ServerFrontendMessage.StartProcess|undefined} value */
proto.intiface_protocol.ServerFrontendMessage.prototype.setStartprocess = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.intiface_protocol.ServerFrontendMessage.oneofGroups_[0], value);
};


proto.intiface_protocol.ServerFrontendMessage.prototype.clearStartprocess = function() {
  this.setStartprocess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.intiface_protocol.ServerFrontendMessage.prototype.hasStartprocess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StopProcess stopprocess = 2;
 * @return {?proto.intiface_protocol.ServerFrontendMessage.StopProcess}
 */
proto.intiface_protocol.ServerFrontendMessage.prototype.getStopprocess = function() {
  return /** @type{?proto.intiface_protocol.ServerFrontendMessage.StopProcess} */ (
    jspb.Message.getWrapperField(this, proto.intiface_protocol.ServerFrontendMessage.StopProcess, 2));
};


/** @param {?proto.intiface_protocol.ServerFrontendMessage.StopProcess|undefined} value */
proto.intiface_protocol.ServerFrontendMessage.prototype.setStopprocess = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.intiface_protocol.ServerFrontendMessage.oneofGroups_[0], value);
};


proto.intiface_protocol.ServerFrontendMessage.prototype.clearStopprocess = function() {
  this.setStopprocess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.intiface_protocol.ServerFrontendMessage.prototype.hasStopprocess = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StartProxy startproxy = 3;
 * @return {?proto.intiface_protocol.ServerFrontendMessage.StartProxy}
 */
proto.intiface_protocol.ServerFrontendMessage.prototype.getStartproxy = function() {
  return /** @type{?proto.intiface_protocol.ServerFrontendMessage.StartProxy} */ (
    jspb.Message.getWrapperField(this, proto.intiface_protocol.ServerFrontendMessage.StartProxy, 3));
};


/** @param {?proto.intiface_protocol.ServerFrontendMessage.StartProxy|undefined} value */
proto.intiface_protocol.ServerFrontendMessage.prototype.setStartproxy = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.intiface_protocol.ServerFrontendMessage.oneofGroups_[0], value);
};


proto.intiface_protocol.ServerFrontendMessage.prototype.clearStartproxy = function() {
  this.setStartproxy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.intiface_protocol.ServerFrontendMessage.prototype.hasStartproxy = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StopProxy stopproxy = 4;
 * @return {?proto.intiface_protocol.ServerFrontendMessage.StopProxy}
 */
proto.intiface_protocol.ServerFrontendMessage.prototype.getStopproxy = function() {
  return /** @type{?proto.intiface_protocol.ServerFrontendMessage.StopProxy} */ (
    jspb.Message.getWrapperField(this, proto.intiface_protocol.ServerFrontendMessage.StopProxy, 4));
};


/** @param {?proto.intiface_protocol.ServerFrontendMessage.StopProxy|undefined} value */
proto.intiface_protocol.ServerFrontendMessage.prototype.setStopproxy = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.intiface_protocol.ServerFrontendMessage.oneofGroups_[0], value);
};


proto.intiface_protocol.ServerFrontendMessage.prototype.clearStopproxy = function() {
  this.setStopproxy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.intiface_protocol.ServerFrontendMessage.prototype.hasStopproxy = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UpdateConfig updateconfig = 5;
 * @return {?proto.intiface_protocol.ServerFrontendMessage.UpdateConfig}
 */
proto.intiface_protocol.ServerFrontendMessage.prototype.getUpdateconfig = function() {
  return /** @type{?proto.intiface_protocol.ServerFrontendMessage.UpdateConfig} */ (
    jspb.Message.getWrapperField(this, proto.intiface_protocol.ServerFrontendMessage.UpdateConfig, 5));
};


/** @param {?proto.intiface_protocol.ServerFrontendMessage.UpdateConfig|undefined} value */
proto.intiface_protocol.ServerFrontendMessage.prototype.setUpdateconfig = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.intiface_protocol.ServerFrontendMessage.oneofGroups_[0], value);
};


proto.intiface_protocol.ServerFrontendMessage.prototype.clearUpdateconfig = function() {
  this.setUpdateconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.intiface_protocol.ServerFrontendMessage.prototype.hasUpdateconfig = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.intiface_protocol);
